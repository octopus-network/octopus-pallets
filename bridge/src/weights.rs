// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_octopus_bridge
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-27, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `andy-VirtualBox`, CPU: `AMD Ryzen 7 5800H with Radeon Graphics`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/appchain-barnacle
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_octopus_bridge
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./octopus/octopus-pallets/bridge/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_octopus_bridge.
pub trait WeightInfo {
	fn lock() -> Weight;
	fn burn_nep141() -> Weight;
	fn lock_nonfungible() -> Weight;
	fn set_token_id() -> Weight;
	fn delete_token_id() -> Weight;
	fn force_unlock() -> Weight;
	fn force_mint_nep141() -> Weight;
	fn force_unlock_nonfungible() -> Weight;
	fn set_oracle_account() -> Weight;
	fn set_token_price() -> Weight;
}

/// Weights for pallet_octopus_bridge using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: OctopusAppchain IsActivated (r:1 w:0)
	// Storage: OctopusBridge CrosschainTransferFee (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: OctopusUpwardMessages MessageQueue (r:1 w:1)
	// Storage: OctopusUpwardMessages Nonce (r:1 w:1)
	fn lock() -> Weight {
		Weight::from_ref_time(176_690_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: OctopusAppchain IsActivated (r:1 w:0)
	// Storage: OctopusBridge CrosschainTransferFee (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: OctopusBridge AssetIdByTokenId (r:2 w:0)
	// Storage: OctopusAssets Asset (r:1 w:1)
	// Storage: OctopusAssets Account (r:1 w:1)
	// Storage: OctopusUpwardMessages MessageQueue (r:1 w:1)
	// Storage: OctopusUpwardMessages Nonce (r:1 w:1)
	fn burn_nep141() -> Weight {
		Weight::from_ref_time(270_422_000 as u64)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: OctopusAppchain IsActivated (r:1 w:0)
	// Storage: OctopusBridge CrosschainTransferFee (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: OctopusUniques ClassMetadataOf (r:1 w:0)
	// Storage: OctopusUniques InstanceMetadataOf (r:1 w:0)
	// Storage: OctopusUniques Class (r:1 w:0)
	// Storage: OctopusUniques Asset (r:1 w:1)
	// Storage: OctopusUpwardMessages MessageQueue (r:1 w:1)
	// Storage: OctopusUpwardMessages Nonce (r:1 w:1)
	// Storage: OctopusUniques Account (r:0 w:2)
	// Storage: OctopusUniques ItemPriceOf (r:0 w:1)
	fn lock_nonfungible() -> Weight {
		Weight::from_ref_time(215_503_000 as u64)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: OctopusAppchain IsActivated (r:1 w:0)
	// Storage: OctopusBridge AssetIdByTokenId (r:3 w:1)
	fn set_token_id() -> Weight {
		Weight::from_ref_time(47_302_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: OctopusBridge AssetIdByTokenId (r:1 w:1)
	fn delete_token_id() -> Weight {
		Weight::from_ref_time(24_979_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: System Account (r:1 w:1)
	fn force_unlock() -> Weight {
		Weight::from_ref_time(98_484_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: OctopusAssets Asset (r:1 w:1)
	// Storage: OctopusAssets Account (r:1 w:1)
	fn force_mint_nep141() -> Weight {
		Weight::from_ref_time(88_481_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: OctopusUniques Class (r:1 w:0)
	// Storage: OctopusUniques Asset (r:1 w:1)
	// Storage: OctopusUniques Account (r:0 w:1)
	// Storage: OctopusUniques ItemPriceOf (r:0 w:1)
	fn force_unlock_nonfungible() -> Weight {
		Weight::from_ref_time(91_368_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: OctopusBridge OracleAccount (r:0 w:1)
	fn set_oracle_account() -> Weight {
		Weight::from_ref_time(32_688_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: OctopusBridge OracleAccount (r:1 w:0)
	// Storage: OctopusBridge CrosschainTransferFee (r:0 w:2)
	// Storage: OctopusBridge TokenPrice (r:0 w:1)
	fn set_token_price() -> Weight {
		Weight::from_ref_time(48_595_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: OctopusAppchain IsActivated (r:1 w:0)
	// Storage: OctopusBridge CrosschainTransferFee (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: OctopusUpwardMessages MessageQueue (r:1 w:1)
	// Storage: OctopusUpwardMessages Nonce (r:1 w:1)
	fn lock() -> Weight {
		Weight::from_ref_time(176_690_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: OctopusAppchain IsActivated (r:1 w:0)
	// Storage: OctopusBridge CrosschainTransferFee (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: OctopusBridge AssetIdByTokenId (r:2 w:0)
	// Storage: OctopusAssets Asset (r:1 w:1)
	// Storage: OctopusAssets Account (r:1 w:1)
	// Storage: OctopusUpwardMessages MessageQueue (r:1 w:1)
	// Storage: OctopusUpwardMessages Nonce (r:1 w:1)
	fn burn_nep141() -> Weight {
		Weight::from_ref_time(270_422_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(9 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: OctopusAppchain IsActivated (r:1 w:0)
	// Storage: OctopusBridge CrosschainTransferFee (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: OctopusUniques ClassMetadataOf (r:1 w:0)
	// Storage: OctopusUniques InstanceMetadataOf (r:1 w:0)
	// Storage: OctopusUniques Class (r:1 w:0)
	// Storage: OctopusUniques Asset (r:1 w:1)
	// Storage: OctopusUpwardMessages MessageQueue (r:1 w:1)
	// Storage: OctopusUpwardMessages Nonce (r:1 w:1)
	// Storage: OctopusUniques Account (r:0 w:2)
	// Storage: OctopusUniques ItemPriceOf (r:0 w:1)
	fn lock_nonfungible() -> Weight {
		Weight::from_ref_time(215_503_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(9 as u64))
			.saturating_add(RocksDbWeight::get().writes(7 as u64))
	}
	// Storage: OctopusAppchain IsActivated (r:1 w:0)
	// Storage: OctopusBridge AssetIdByTokenId (r:3 w:1)
	fn set_token_id() -> Weight {
		Weight::from_ref_time(47_302_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: OctopusBridge AssetIdByTokenId (r:1 w:1)
	fn delete_token_id() -> Weight {
		Weight::from_ref_time(24_979_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: System Account (r:1 w:1)
	fn force_unlock() -> Weight {
		Weight::from_ref_time(98_484_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: OctopusAssets Asset (r:1 w:1)
	// Storage: OctopusAssets Account (r:1 w:1)
	fn force_mint_nep141() -> Weight {
		Weight::from_ref_time(88_481_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: OctopusUniques Class (r:1 w:0)
	// Storage: OctopusUniques Asset (r:1 w:1)
	// Storage: OctopusUniques Account (r:0 w:1)
	// Storage: OctopusUniques ItemPriceOf (r:0 w:1)
	fn force_unlock_nonfungible() -> Weight {
		Weight::from_ref_time(91_368_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: OctopusBridge OracleAccount (r:0 w:1)
	fn set_oracle_account() -> Weight {
		Weight::from_ref_time(32_688_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: OctopusBridge OracleAccount (r:1 w:0)
	// Storage: OctopusBridge CrosschainTransferFee (r:0 w:2)
	// Storage: OctopusBridge TokenPrice (r:0 w:1)
	fn set_token_price() -> Weight {
		Weight::from_ref_time(48_595_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
}
