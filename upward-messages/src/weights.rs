// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_octopus_upward_messages
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-27, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `andy-VirtualBox`, CPU: `AMD Ryzen 7 5800H with Radeon Graphics`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/appchain-barnacle
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_octopus_upward_messages
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./octopus/octopus-pallets/upward-messages/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_octopus_upward_messages.
pub trait WeightInfo {
	fn on_initialize(m: u32, p: u32, ) -> Weight;
	fn on_initialize_non_interval() -> Weight;
	fn on_initialize_no_messages() -> Weight;
}

/// Weights for pallet_octopus_upward_messages using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: OctopusUpwardMessages Interval (r:1 w:0)
	// Storage: OctopusUpwardMessages MessageQueue (r:1 w:1)
	// Storage: System Digest (r:1 w:1)
	/// The range of component `m` is `[1, 20]`.
	/// The range of component `p` is `[0, 256]`.
	fn on_initialize(m: u32, p: u32, ) -> Weight {
		Weight::from_ref_time(44_276_000 as u64)
			// Standard Error: 25_426
			.saturating_add(Weight::from_ref_time(1_355_295 as u64).saturating_mul(m as u64))
			// Standard Error: 1_982
			.saturating_add(Weight::from_ref_time(43_983 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: OctopusUpwardMessages Interval (r:1 w:0)
	fn on_initialize_non_interval() -> Weight {
		Weight::from_ref_time(8_801_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: OctopusUpwardMessages Interval (r:1 w:0)
	// Storage: OctopusUpwardMessages MessageQueue (r:1 w:0)
	fn on_initialize_no_messages() -> Weight {
		Weight::from_ref_time(10_705_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: OctopusUpwardMessages Interval (r:1 w:0)
	// Storage: OctopusUpwardMessages MessageQueue (r:1 w:1)
	// Storage: System Digest (r:1 w:1)
	/// The range of component `m` is `[1, 20]`.
	/// The range of component `p` is `[0, 256]`.
	fn on_initialize(m: u32, p: u32, ) -> Weight {
		Weight::from_ref_time(44_276_000 as u64)
			// Standard Error: 25_426
			.saturating_add(Weight::from_ref_time(1_355_295 as u64).saturating_mul(m as u64))
			// Standard Error: 1_982
			.saturating_add(Weight::from_ref_time(43_983 as u64).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: OctopusUpwardMessages Interval (r:1 w:0)
	fn on_initialize_non_interval() -> Weight {
		Weight::from_ref_time(8_801_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: OctopusUpwardMessages Interval (r:1 w:0)
	// Storage: OctopusUpwardMessages MessageQueue (r:1 w:0)
	fn on_initialize_no_messages() -> Weight {
		Weight::from_ref_time(10_705_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
	}
}
