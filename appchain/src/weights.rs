// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_octopus_appchain
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-07-04, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/debug/node-template
// benchmark
// --chain
// dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_octopus_appchain
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// ./bin/node-template/octopus-pallets/appchain/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_octopus_appchain.
pub trait WeightInfo {
	fn force_set_is_activated() -> Weight;
	fn force_set_next_set_id(b: u32, ) -> Weight;
	fn force_set_planned_validators(b: u32, ) -> Weight;
	fn lock() -> Weight;
	fn mint_asset() -> Weight;
	fn burn_asset() -> Weight;
	fn set_asset_name() -> Weight;
	fn tranfer_from_pallet_account() -> Weight;
	fn lock_nft() -> Weight;
	fn delete_token_id() -> Weight;
}

/// Weights for pallet_octopus_appchain using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: OctopusAppchain IsActivated (r:0 w:1)
	fn force_set_is_activated() -> Weight {
		(44_694_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: OctopusAppchain NextSetId (r:0 w:1)
	fn force_set_next_set_id(_b: u32, ) -> Weight {
		(352_705_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: OctopusAppchain PlannedValidators (r:0 w:1)
	fn force_set_planned_validators(_b: u32, ) -> Weight {
		(56_770_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: OctopusAppchain IsActivated (r:1 w:0)
	// Storage: OctopusUpwardMessages MessageQueue (r:1 w:1)
	// Storage: OctopusUpwardMessages Nonce (r:1 w:1)
	fn lock() -> Weight {
		(870_434_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: OctopusAssets Asset (r:1 w:1)
	// Storage: OctopusAssets Account (r:1 w:1)
	fn mint_asset() -> Weight {
		(1_531_204_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: OctopusAppchain IsActivated (r:1 w:0)
	// Storage: OctopusAppchain AssetIdByTokenId (r:2 w:0)
	// Storage: OctopusAssets Asset (r:1 w:1)
	// Storage: OctopusAssets Account (r:1 w:1)
	// Storage: OctopusUpwardMessages MessageQueue (r:1 w:1)
	// Storage: OctopusUpwardMessages Nonce (r:1 w:1)
	fn burn_asset() -> Weight {
		(2_211_922_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: OctopusAppchain IsActivated (r:1 w:0)
	// Storage: OctopusAppchain AssetIdByTokenId (r:3 w:1)
	fn set_asset_name() -> Weight {
		(694_313_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:1)
	fn tranfer_from_pallet_account() -> Weight {
		(1_835_074_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: OctopusAppchain IsActivated (r:1 w:0)
	// Storage: OctopusUniques ClassMetadataOf (r:1 w:0)
	// Storage: OctopusUniques InstanceMetadataOf (r:1 w:0)
	// Storage: OctopusUniques Class (r:1 w:0)
	// Storage: OctopusUniques Asset (r:1 w:1)
	// Storage: OctopusUpwardMessages Nonce (r:1 w:1)
	// Storage: OctopusUpwardMessages MessageQueue (r:1 w:1)
	// Storage: OctopusUniques Account (r:0 w:2)
	fn lock_nft() -> Weight {
		(2_447_795_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: OctopusAppchain AssetIdByTokenId (r:1 w:1)
	fn delete_token_id() -> Weight {
		(207_420_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: OctopusAppchain IsActivated (r:0 w:1)
	fn force_set_is_activated() -> Weight {
		(44_694_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: OctopusAppchain NextSetId (r:0 w:1)
	fn force_set_next_set_id(_b: u32, ) -> Weight {
		(352_705_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: OctopusAppchain PlannedValidators (r:0 w:1)
	fn force_set_planned_validators(_b: u32, ) -> Weight {
		(56_770_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: OctopusAppchain IsActivated (r:1 w:0)
	// Storage: OctopusUpwardMessages MessageQueue (r:1 w:1)
	// Storage: OctopusUpwardMessages Nonce (r:1 w:1)
	fn lock() -> Weight {
		(870_434_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: OctopusAssets Asset (r:1 w:1)
	// Storage: OctopusAssets Account (r:1 w:1)
	fn mint_asset() -> Weight {
		(1_531_204_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: OctopusAppchain IsActivated (r:1 w:0)
	// Storage: OctopusAppchain AssetIdByTokenId (r:2 w:0)
	// Storage: OctopusAssets Asset (r:1 w:1)
	// Storage: OctopusAssets Account (r:1 w:1)
	// Storage: OctopusUpwardMessages MessageQueue (r:1 w:1)
	// Storage: OctopusUpwardMessages Nonce (r:1 w:1)
	fn burn_asset() -> Weight {
		(2_211_922_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: OctopusAppchain IsActivated (r:1 w:0)
	// Storage: OctopusAppchain AssetIdByTokenId (r:3 w:1)
	fn set_asset_name() -> Weight {
		(694_313_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:1)
	fn tranfer_from_pallet_account() -> Weight {
		(1_835_074_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: OctopusAppchain IsActivated (r:1 w:0)
	// Storage: OctopusUniques ClassMetadataOf (r:1 w:0)
	// Storage: OctopusUniques InstanceMetadataOf (r:1 w:0)
	// Storage: OctopusUniques Class (r:1 w:0)
	// Storage: OctopusUniques Asset (r:1 w:1)
	// Storage: OctopusUpwardMessages Nonce (r:1 w:1)
	// Storage: OctopusUpwardMessages MessageQueue (r:1 w:1)
	// Storage: OctopusUniques Account (r:0 w:2)
	fn lock_nft() -> Weight {
		(2_447_795_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: OctopusAppchain AssetIdByTokenId (r:1 w:1)
	fn delete_token_id() -> Weight {
		(207_420_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}
