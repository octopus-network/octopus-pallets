// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_octopus_appchain
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-27, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `andy-VirtualBox`, CPU: `AMD Ryzen 7 5800H with Radeon Graphics`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/appchain-barnacle
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_octopus_appchain
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./octopus/octopus-pallets/appchain/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_octopus_appchain.
pub trait WeightInfo {
	fn force_set_is_activated() -> Weight;
	fn force_set_next_set_id() -> Weight;
	fn force_set_planned_validators(b: u32, ) -> Weight;
	fn force_set_next_notification_id() -> Weight;
	fn submit_observations(b: u32, ) -> Weight;
}

/// Weights for pallet_octopus_appchain using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: OctopusAppchain IsActivated (r:0 w:1)
	fn force_set_is_activated() -> Weight {
		Weight::from_ref_time(10_856_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: OctopusAppchain NextSetId (r:0 w:1)
	fn force_set_next_set_id() -> Weight {
		Weight::from_ref_time(26_202_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: OctopusAppchain PlannedValidators (r:0 w:1)
	/// The range of component `b` is `[2, 100]`.
	fn force_set_planned_validators(b: u32, ) -> Weight {
		Weight::from_ref_time(11_677_000 as u64)
			// Standard Error: 2_816
			.saturating_add(Weight::from_ref_time(42_125 as u64).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: OctopusAppchain NextNotificationId (r:0 w:1)
	fn force_set_next_notification_id() -> Weight {
		Weight::from_ref_time(26_403_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Session KeyOwner (r:1 w:0)
	// Storage: Session Validators (r:1 w:0)
	// Storage: OctopusAppchain NextSetId (r:1 w:1)
	// Storage: OctopusAppchain Observations (r:2 w:2)
	// Storage: OctopusAppchain Observing (r:2 w:2)
	// Storage: OctopusLpos ActiveEra (r:1 w:0)
	// Storage: OctopusLpos ErasTotalStake (r:1 w:0)
	// Storage: OctopusLpos ErasStakers (r:1 w:0)
	// Storage: OctopusAppchain NextNotificationId (r:1 w:1)
	// Storage: OctopusBridge AssetIdByTokenId (r:1 w:0)
	// Storage: OctopusAssets Asset (r:1 w:1)
	// Storage: OctopusAssets Account (r:1 w:1)
	// Storage: OctopusAppchain PlannedValidators (r:0 w:1)
	// Storage: OctopusAppchain NotificationHistory (r:0 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `b` is `[2, 10]`.
	fn submit_observations(b: u32, ) -> Weight {
		Weight::from_ref_time(362_301_000 as u64)
			// Standard Error: 906_452
			.saturating_add(Weight::from_ref_time(94_376_073 as u64).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().reads(14 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(b as u64)))
			.saturating_add(T::DbWeight::get().writes(10 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(b as u64)))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: OctopusAppchain IsActivated (r:0 w:1)
	fn force_set_is_activated() -> Weight {
		Weight::from_ref_time(10_856_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: OctopusAppchain NextSetId (r:0 w:1)
	fn force_set_next_set_id() -> Weight {
		Weight::from_ref_time(26_202_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: OctopusAppchain PlannedValidators (r:0 w:1)
	/// The range of component `b` is `[2, 100]`.
	fn force_set_planned_validators(b: u32, ) -> Weight {
		Weight::from_ref_time(11_677_000 as u64)
			// Standard Error: 2_816
			.saturating_add(Weight::from_ref_time(42_125 as u64).saturating_mul(b as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: OctopusAppchain NextNotificationId (r:0 w:1)
	fn force_set_next_notification_id() -> Weight {
		Weight::from_ref_time(26_403_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Session KeyOwner (r:1 w:0)
	// Storage: Session Validators (r:1 w:0)
	// Storage: OctopusAppchain NextSetId (r:1 w:1)
	// Storage: OctopusAppchain Observations (r:2 w:2)
	// Storage: OctopusAppchain Observing (r:2 w:2)
	// Storage: OctopusLpos ActiveEra (r:1 w:0)
	// Storage: OctopusLpos ErasTotalStake (r:1 w:0)
	// Storage: OctopusLpos ErasStakers (r:1 w:0)
	// Storage: OctopusAppchain NextNotificationId (r:1 w:1)
	// Storage: OctopusBridge AssetIdByTokenId (r:1 w:0)
	// Storage: OctopusAssets Asset (r:1 w:1)
	// Storage: OctopusAssets Account (r:1 w:1)
	// Storage: OctopusAppchain PlannedValidators (r:0 w:1)
	// Storage: OctopusAppchain NotificationHistory (r:0 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `b` is `[2, 10]`.
	fn submit_observations(b: u32, ) -> Weight {
		Weight::from_ref_time(362_301_000 as u64)
			// Standard Error: 906_452
			.saturating_add(Weight::from_ref_time(94_376_073 as u64).saturating_mul(b as u64))
			.saturating_add(RocksDbWeight::get().reads(14 as u64))
			.saturating_add(RocksDbWeight::get().reads((2 as u64).saturating_mul(b as u64)))
			.saturating_add(RocksDbWeight::get().writes(10 as u64))
			.saturating_add(RocksDbWeight::get().writes((2 as u64).saturating_mul(b as u64)))
	}
}
